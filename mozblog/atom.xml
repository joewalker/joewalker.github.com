<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Incompleteness</title>
  <link href="http://incompleteness.me/mozblog/atom.xml" rel="self"/>
  <link href="http://incompleteness.me/mozblog/"/>
  <updated>2011-12-16T12:22:33+00:00</updated>
  <id>http://incompleteness.me/</id>
  <author>
    <name>Joe Walker</name>
    
  </author>

  
  <entry>
    <title>Combating Self-XSS</title>
    <link href="http://incompleteness.me/mozblog/2011/12/14/combating-self-xss/"/>
    <updated>2011-12-14T12:00:00+00:00</updated>
    <id>http://incompleteness.me/mozblog/2011/12/14/combating-self-xss</id>
    <content type="html">&lt;h3&gt;What is Self-XSS?&lt;/h3&gt;

&lt;p&gt;Dr. Evil has several options for getting his script to execute in the page of
another site. Generically we call this &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt;. Self-XSS involves using
social engineering to coerce a user into manually executing javascript using
the location bar or developer tools.
For more, see &lt;a href=&quot;https://blogs.msdn.com/themes/blogs/generic/post.aspx?WeblogApp=ieinternals&amp;amp;WeblogPostName=socially-engineered-xss-attacks-and-pasting-javascript-in-the-address-bar-in-ie9&quot;&gt;socially-engineered XSS attacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://blog.commtouch.com/cafe/web-security/nasty-facebook-picture-attack-based-on-self-xss/&quot;&gt;recent Facebook attack&lt;/a&gt; signals that something needs to be done, but
knowing the right response is tricky.&lt;/p&gt;

&lt;h3&gt;What is Mozilla doing about it?&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;re proposing adding a directive to &lt;a href=&quot;https://developer.mozilla.org/en/Security/CSP&quot; title=&quot;Content Security Policy&quot;&gt;CSP&lt;/a&gt; that says &lt;em&gt;&amp;#8216;Please disallow
user supplied Javascript in the context of this resource&amp;#8217;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It will probably look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;X-Content-Security-Policy: no-user-js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re also going to add a way for developers to opt out of this protection.
Effectively saying &lt;em&gt;&amp;#8216;I can take care of the JavaScript that I ask my browser to
execute&amp;#8217;&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;How does this affect other Firefox developer tools?&lt;/h3&gt;

&lt;p&gt;It doesn&amp;#8217;t. &lt;a href=&quot;https://hacks.mozilla.org/2011/11/developer-tools-in-firefox-aurora-10/&quot;&gt;The Highligher, Style Inspector&lt;/a&gt;, &lt;a href=&quot;https://wiki.mozilla.org/DevTools/Features/CSSEditor&quot;&gt;Style Editor&lt;/a&gt; and
&lt;a href=&quot;https://blog.mozilla.com/tilt/&quot;&gt;Tilt&lt;/a&gt; are all unaffected. This is only about JavaScript executed via
the Web Console and &lt;a href=&quot;https://blog.mozilla.com/devtools/2011/08/15/introducing-scratchpad/&quot;&gt;Scratchpad&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How does this affect users?&lt;/h3&gt;

&lt;div&gt;
&lt;style&gt;
table.custom { border-collapse: collapse; }
table.custom td, table.custom th { border: 1px solid #aaa; padding: 5px; }
table.custom th { text-align: center; font-weight: bold; }
&lt;/style&gt;
&lt;/div&gt;




&lt;table class=custom&gt;
  &lt;tr&gt;
    &lt;th colspan=2 rowspan=2&gt;User
    &lt;th colspan=2&gt;Is a developer?
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;No
    &lt;th&gt;Yes
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th rowspan=2&gt;Can recognize Self-XSS attack?
    &lt;th&gt;No
    &lt;td&gt;Added Self-XSS attacks protection.
    &lt;td&gt;Warned about Self-XSS, may benefit from protection.
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Yes
    &lt;td&gt;Unchanged
    &lt;td&gt;Minor inconvenience of having to set a preference (one time only) to enable user JavaScript on sites using this Self-XSS protection.
  &lt;/tr&gt;
&lt;/table&gt;


&lt;p&gt;I think this is a fairly clear net win: Minor, one time only, inconvenience to
a sub-set of web developers, vs. full-time protection for the many that
wouldn&amp;#8217;t recognize a self-xss attack.&lt;/p&gt;

&lt;h3&gt;Objections: This is a user problem&lt;/h3&gt;

&lt;p&gt;The goal of educating 7 billion people about what JavaScript can do is lofty,
grandiose, ambitious and utterly unattainable. There has to be another solution.&lt;/p&gt;

&lt;h3&gt;Objections: This is a Facebook problem&lt;/h3&gt;

&lt;p&gt;While it&amp;#8217;s true that allowing untrusted, unvetted third party dynamic content
onto your site is something that I would generally advise against. However I
don&amp;#8217;t think that fixing this would fix the problem. The attack could easily
forward you to another site to see the clipboard injecting flash, before
returning you to the original site for the &amp;#8216;paste&amp;#8217; step&lt;/p&gt;

&lt;h3&gt;Objections: This is a Flash problem&lt;/h3&gt;

&lt;p&gt;While it&amp;#8217;s true that Adobe&amp;#8217;s clipboard policies are more relaxed than those of
major web browsers, we&amp;#8217;ve seen people caught by instructions that ask people to
select/copy their own attack script. We think that the level of pain caused to
developers by the CSP solution is low enough that we can justify the additional
protection.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Eat an Elephant</title>
    <link href="http://incompleteness.me/mozblog/2011/09/16/how-to-eat-an-elephant/"/>
    <updated>2011-09-16T13:50:00+01:00</updated>
    <id>http://incompleteness.me/mozblog/2011/09/16/how-to-eat-an-elephant</id>
    <content type="html">&lt;p&gt;This is about levels of change. It&amp;#8217;s partly about &lt;a href=&quot;http://hg.mozilla.org&quot;&gt;hg.mozilla.org&lt;/a&gt; vs &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;
(or &lt;a href=&quot;http://bitbucket.org&quot;&gt;BitBucket&lt;/a&gt;). But it&amp;#8217;s more about our
devt/review/commit process.&lt;/p&gt;

&lt;p&gt;Moz-central demands patches that solve significant issues, and it&amp;#8217;s probably
right in wanting this, but this bite size comes with problems.&lt;/p&gt;

&lt;p&gt;There are 3 levels of change worth discussing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;detail&lt;/strong&gt; level we&amp;#8217;re used to working at: &amp;#8217;&lt;em&gt;Added foo&lt;/em&gt;&amp;#8217;, &amp;#8217;&lt;em&gt;Renamed foo
to bar&lt;/em&gt;&amp;#8217;, etc. If working in a small team, this is probably the level we
would commit at. At this level it&amp;#8217;s easy to understand the
&lt;a href=&quot;https://github.com/joewalker/gcli/commit/3d5a5ff2187f0a363cd7c89cb78f7bb24dd168aa&quot;&gt;intent behind each change&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;review&lt;/strong&gt; level which is an ideal chunk for someone to review.
You probably don&amp;#8217;t want to review every new commit as it&amp;#8217;s done, but on the
other hand, you don&amp;#8217;t want to be told that you made a mistake weeks ago and
need to redo lots of work. So ideally this happens on something like a daily
basis. It&amp;#8217;s the scale that &lt;a href=&quot;https://github.com/joewalker/gcli/pull/2&quot;&gt;pull requests&lt;/a&gt;
were designed for.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;patch&lt;/strong&gt; level which mozilla-central is used to, and which is ideal for
commit. The work is &amp;#8216;done&amp;#8217; and useful for a much wider audience. When a bug
is fixed we can extract a patch to be committed,
&lt;a href=&quot;https://bug684958.bugzilla.mozilla.org/attachment.cgi?id=559115&quot;&gt;like this one for bug 684958&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The problem with the Mozilla process is that steps 1 and 2 don&amp;#8217;t exist at all.
The benefits to the existence of more detailed change levels are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review is faster and deeper. You can review &lt;a href=&quot;https://github.com/joewalker/gcli/pull/2&quot;&gt;this pull request&lt;/a&gt;
far better than &lt;a href=&quot;https://bugzilla.mozilla.org/attachment.cgi?id=559115&amp;amp;action=diff&quot;&gt;a conventional patch&lt;/a&gt;
because you can see what I&amp;#8217;m intending by each change - you don&amp;#8217;t need to
reverse engineer the intent and mentally hold together all the bits of mashed
together bits of intent.&lt;/li&gt;
&lt;li&gt;Smaller changes are easier. Our current process prevents us from clearing up
small things that are not directly related to the bug in hand. We can (for
example) entertain the thought of variable renaming because it won&amp;#8217;t confuse
the patch. There may be other reasons not to go crazy with this, but at least
the process won&amp;#8217;t be one.&lt;/li&gt;
&lt;li&gt;Progress is visible. Because we can share to a smaller team before we&amp;#8217;re done,
everyone gets to see what&amp;#8217;s happening. There is a feeling of momentum -
progress is the norm. Just like a 6-week cycle is better than an 18-month
cycle, a daily commit/pull cycle is better than a weekly patch/review cycle.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In effect we&amp;#8217;re using GitHub as a tool to develop patches for Firefox, rather
than to develop Firefox itself. In some ways &lt;a href=&quot;https://github.com/joewalker/gcli/tree/review/mozilla/patches&quot;&gt;I mean this literally&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are probably reasons why the detail of what works for GCLI might not
exactly work in other places, but I&amp;#8217;m willing to bet that these ideas could be
adapted to be of more general use.&lt;/p&gt;

&lt;p&gt;Fundamentally we solve big problems by breaking them down into smaller steps.&lt;/p&gt;

&lt;p&gt;I can eat an elephant, but not by opening really wide.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Marketing (according to the browser makers)</title>
    <link href="http://incompleteness.me/mozblog/2010/09/13/marketing-according-to-the-browser-makers/"/>
    <updated>2010-09-13T13:50:00+01:00</updated>
    <id>http://incompleteness.me/mozblog/2010/09/13/marketing-according-to-the-browser-makers</id>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/paulrouget/status/19734735459&quot;&gt;Mozilla: Go Open Web, Go Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/diveintomark/status/21115916946&quot;&gt;Google: Go Google, Go Open Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.guardian.co.uk/technology/blog/2010/jun/04/html5-apple-browser-standard-mistake&quot;&gt;Apple: Go Apple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.slashdot.org/story/10/09/12/2018229/IE9-Team-Says-Our-GPU-Acceleration-Is-Better-Than-Yours&quot;&gt;Microsoft: The others are teh suck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
</feed>
